class Iterator {
  constructor(range) {
    this._range = range;
    this._value = this._range.begin;
  }
  
  function next() {
    this._value = this._value + 1;
    this._done  = this._value > this._range.end;

    return this;
  }
  
  function value() {
    return this._value;
  }
}

class Range {
  constructor(begin, end) {
    this.begin = begin - 1;
    this.end   = end;
  }

  function iterator() {
    return new Iterator(this);
  }
}

// var iter = new Range(1, 3).iterator();

// var iter = iter.next(); console.log(iter);
// var iter = iter.next(); console.log(iter);
// var iter = iter.next(); console.log(iter);

// console.log("=====");

// var iter1 = new Range(1, 3).iterator();
// var iter2 = new Range(11, 3).iterator();

// console.log([iter1, iter2].reduce((iters, iter) => iters.concat([iter.next()]), []));
// console.log([iter1, iter2].reduce((iters, iter) => iters.concat([iter.next()]), []));
// //console.log([iter1, iter2].reduce((iters, iter) => iters.concat([iter.next()]), []));

// console.log([iter1, iter2].map(iter => iter.next()));

// console.log([iter1, iter2].map(iter => iter.value()));

function map(selector, iterables) {
  var iterators = iterables.map(iterable => iterable.iterator());

  function _map(selector, iterators, values) {
    var iterators = iterators.map(iter => iter.next());

    if (iterators.some(iter => iter._done)) {
      return values;
    } else {
      return _map(selector, iterators, iterators.map((iterator, i) => values[i] ++ selector(iterator.value())));
    }
  }

  return _map(selector, iterators, new Array(iterators.length).fill([]));
}

console.log("=====");

console.log(map(n => n * n, [new Range(1, 3), new Range(2, 5)])); // [[1, 4, 9], [1, 4, 9]]
