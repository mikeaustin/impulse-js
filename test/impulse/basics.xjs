
//
// Object Equality
//

console.log(1 == 1);
console.log([1, 2, 3] == [1, 2, 3]);
console.log((10, "foo") == (10, "foo"));

var x;

console.log(x === undefined);


//
// Type Validation
//

console.log(Number.isTypeOf(1));
console.log([Number].isTypeOf([1, 2, 3]));
console.log((Number, String).isTypeOf((10, "foo")));

console.log("__LINE__ ==", __LINE__);


//
// Range and Tuple
//

var result = (1..5).map(n => n * n);

console.log(result);

var result = [(1, 2), (3, 4)];

console.log(result[0], result[1]);


//
// Map
//

var id = new Date();

var data = {
  id: 10, 1: "one"
};

data << (2, "two");
data ++ { "name": "Joe", "age": 20 };

console.log(data[id] === 10);
console.log(data[2] === "two");
console.log(data["name"] === "Joe");


//
// Bound 'this'
//

var callback = "foo".slice;

var result = callback(0, 1);

console.log(result);


//
// Traits
//

trait TestTrait (foo, bar) {
  function test() {
    return this.foo() + this.bar();
  }
}

class TestClass {
  function foo() { return 2; }
}

extend TestClass with TestTrait {
  function bar() { return 3; }
}

var test = new TestClass();

var result = test.test();

console.log(result == 5);


//
// Extension Methods
//

extend String {

  function capitalize() {
    // return this.slice(begin: 0, end: 1).toUpperCase() ++ this.slice(begin: 1).toLowerCase();
    // return this.slice(0..1).toUpperCase() ++ this.slice(1..undefined).toLowerCase();
    // return this._idx(0..1).toUpperCase() ++ this._idx(1..undefined).toLowerCase();
    return this[0..1].toUpperCase() ++ this[1..Infinity].toLowerCase();
  }

}

var result = "fOO".capitalize();

console.log("'fOO'.capitlize() ==", result);


//
// Class Inheritance
//

class Vector {

  constructor(x, y) {
    this._x = x;
    this._y = y;
  }

}

class Vector3D extends Vector {

  constructor(x, y, z) {
    Vector.apply(this, [x, y]);
    this._z = z;
  }

}

extend Vector3D {
  
  function _add(that) {
    return new Vector3D(this._x + that._x, this._y + that._y, this._z + that._z);
  }

}

var result = new Vector3D(1, 2, 3) + new Vector3D(1, 2, 3);

console.log(result);


//
// CPS Transformation
//

function delay(seconds) {
  return new Promise((resolve, reject) => {
    setTimeout(() => resolve(seconds), seconds);
  });
}

function cps() {
  var a <= delay(200), b <= delay(2000);

  console.log(">>> 0", a, b);

  var values <= (delay(200), delay(2000));

  console.log(">>> 1", values);
}

cps();

() => {
  var value <= delay(100);

  console.log(">>> 2", value);

  var value <= delay(0);

  console.log(">>> 3", value);
} ();

console.log("here");


//
// Iteration
//

var result = reduce(x => {
  if (x < 5) {
    return x + 1;
  }
}, 0);

console.log(result);


var result = ((x = 100, y = 200) => x + y)();

console.log(result);


//
// Partial Application
//

extend Array {

  function map(func) {
    return this.map(func);
  }

}

extend String {

  function slice(begin, end) {
    return this.slice(begin, end);
  }
  
}

console.log("_.map(_.slice(0, 2) ==", _.map(_.slice(0, 2))(["jim", "kate"]));


//
// Module Loading
//

var fs = require("fs");
var impulse = require("./lib/impulse-js");

function cacheIsDirty(basePath) {
  var imjsStats = fs.statSync(basePath ++ ".xjs");
  var jsStats = fs.statSync(basePath ++ ".js");  

  return imjsStats.mtime > jsStats.mtime;
}


impulse.require = (basePath) => {
  if (!fs.existsSync(basePath ++ ".js") || cacheIsDirty(basePath)) {
    var js = impulse.compile(basePath ++ ".xjs");

    fs.writeFileSync(basePath ++ ".js", js);
  }

  return require(basePath);
};

impulse.require("./test/impulse/include");
